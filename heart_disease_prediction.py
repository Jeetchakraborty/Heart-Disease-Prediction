# -*- coding: utf-8 -*-
"""Heart disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fwQxeaoK7vVG3EFJ2cZ8hvVCkMKTOk-y
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processsing"""

heart_data = pd.read_csv('E:\Project\Heart_Disease_Prediction\heart.csv')

heart_data.head()

heart_data.tail()

# Checking The size of dataset
heart_data.shape

heart_data.info()

# Cheaking for missing values
heart_data.isnull().sum()

heart_data.describe()

# Target variable distribution.
heart_data['target'].value_counts()

"""1 -> Unhealthy Heart

0 -> Healthy Heart

Spliting the Features and Target
"""

x = heart_data.drop(columns='target', axis=1)
y = heart_data['target']

print(x)

print(y)

"""Spliting the Data into Training and Testing Data"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, stratify = y, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Model training

Logistic Regresion
"""

model = LogisticRegression()

# Training the Logistic Regresion model with Training data
model.fit(x_train, y_train)

"""Model evaluation Using Accuracy Score"""

# Accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# Accuracy on test data.
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy on test data : ', test_data_accuracy)

"""Building a predictive system."""

input_data = (58,1,0,128,216,0,0,131,1,2.2,1,3,3)

# change  the input data into numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 0):
  print('The person does not have heart disease')
else:
  print('The person has heart disease')

